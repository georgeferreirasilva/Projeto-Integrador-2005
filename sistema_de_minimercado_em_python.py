# -*- coding: utf-8 -*-
"""Sistema de Minimercado em Python

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11XIMk_HYRcv2EdhNjy6qIC5Kkgeihxqz
"""

import datetime

# Dados fictícios para o protótipo
usuarios = {
    "admin": "senha123",
    "caixa1": "caixa123",
    "gerente": "gerente123"
}

produtos = {
    "1001": {"nome": "Arroz 5kg", "preco_custo": 18.50, "preco_venda": 25.99, "estoque": 100, "unidade": "kg"},
    "1002": {"nome": "Feijão 1kg", "preco_custo": 7.00, "preco_venda": 9.99, "estoque": 150, "unidade": "kg"},
    "1003": {"nome": "Óleo de Soja 900ml", "preco_custo": 8.00, "preco_venda": 12.50, "estoque": 200, "unidade": "ml"},
    "1004": {"nome": "Açúcar 5kg", "preco_custo": 12.00, "preco_venda": 17.99, "estoque": 120, "unidade": "kg"},
    "1005": {"nome": "Sal 1kg", "preco_custo": 2.50, "preco_venda": 4.50, "estoque": 300, "unidade": "kg"},
    "2001": {"nome": "Leite UHT 1L", "preco_custo": 4.00, "preco_venda": 6.50, "estoque": 250, "unidade": "l"},
    "2002": {"nome": "Café Torrado 500g", "preco_custo": 9.50, "preco_venda": 14.99, "estoque": 180, "unidade": "g"},
    "2003": {"nome": "Manteiga 200g", "preco_custo": 6.00, "preco_venda": 8.90, "estoque": 100, "unidade": "g"},
    "3001": {"nome": "Detergente Líquido 500ml", "preco_custo": 2.00, "preco_venda": 3.75, "estoque": 400, "unidade": "ml"},
    "3002": {"nome": "Papel Higiênico (4 rolos)", "preco_custo": 5.50, "preco_venda": 8.75, "estoque": 350, "unidade": "rolos"}
}

# Funções auxiliares
def limpar_tela():
    """Limpa a tela do console."""
    import os
    os.system('cls' if os.name == 'nt' else 'clear')

def exibir_mensagem(mensagem, tipo='normal'):
    """Exibe uma mensagem formatada."""
    if tipo == 'erro':
        print(f"\033[31mErro: {mensagem}\033[0m")  # Vermelho
    elif tipo == 'sucesso':
        print(f"\033[32m{mensagem}\033[0m")  # Verde
    elif tipo == 'alerta':
        print(f"\033[33mAlerta: {mensagem}\033[0m")  # Amarelo
    else:
        print(mensagem)

def pausar(mensagem="Pressione Enter para continuar..."):
    """Pausa a execução do programa até que o usuário pressione Enter."""
    input(mensagem)

def validar_codigo_produto(codigo):
    """
    Verifica se o código do produto existe e se o produto tem estoque.

    Args:
        codigo (str): O código do produto a ser validado.

    Returns:
        bool: True se o código é válido e há estoque, False caso contrário.
    """
    if codigo not in produtos:
        exibir_mensagem("Produto não encontrado.", 'erro')
        return False
    if produtos[codigo]['estoque'] <= 0:
        exibir_mensagem("Produto sem estoque.", 'erro')
        return False
    return True

def validar_quantidade(codigo, quantidade):
    """
    Valida a quantidade do produto, verificando se é um número positivo
    e se há estoque suficiente.

    Args:
        codigo (str): O código do produto.
        quantidade (str): A quantidade desejada (string).

    Returns:
        int: A quantidade (int) se válida, 0 caso contrário.
    """
    if not quantidade.isdigit():
        exibir_mensagem("Quantidade inválida. Digite um número.", 'erro')
        return 0
    quantidade_int = int(quantidade)
    if quantidade_int <= 0:
        exibir_mensagem("Quantidade inválida. Digite um número maior que zero.", 'erro')
        return 0
    if quantidade_int > produtos[codigo]['estoque']:
        exibir_mensagem("Quantidade indisponível em estoque.", 'erro')
        return 0
    return quantidade_int

# Funções principais do sistema
def tela_login():
    """
    Simula a tela de login do sistema.

    Retorna:
        str: O nome do usuário logado, ou None em caso de falha no login.
    """
    limpar_tela()
    exibir_mensagem("*** Tela de Login ***", 'alerta')
    tentativas = 3
    while tentativas > 0:
        usuario = input("Usuário: ")
        senha = input("Senha: ")
        if usuario in usuarios and usuarios[usuario] == senha:
            exibir_mensagem("Login realizado com sucesso!", 'sucesso')
            return usuario
        else:
            tentativas -= 1
            exibir_mensagem(f"Usuário ou senha incorretos. Tentativas restantes: {tentativas}", 'erro')
            if tentativas > 0:
                pausar()
                limpar_tela()
            else:
                exibir_mensagem("Número máximo de tentativas excedido. Saindo do sistema.", 'erro')
                return None
    return None

def cadastrar_usuario(usuario_logado):
    """
    Cadastra um novo usuário no sistema. Apenas o administrador pode cadastrar usuários.

    Args:
        usuario_logado (str): O nome do usuário logado.
    """
    limpar_tela()
    exibir_mensagem("*** Cadastro de Usuário ***", 'alerta')
    if usuario_logado != "admin":
        exibir_mensagem("Acesso negado. Somente o administrador pode cadastrar usuários.", 'erro')
        pausar()
        return

    novo_usuario = input("Novo usuário: ")
    if novo_usuario in usuarios:
        exibir_mensagem("Usuário já existe.", 'erro')
        pausar()
        return

    nova_senha = input("Nova senha: ")
    usuarios[novo_usuario] = nova_senha
    exibir_mensagem(f"Usuário '{novo_usuario}' cadastrado com sucesso!", 'sucesso')
    pausar()

def cadastrar_produto(usuario_logado):
    """
    Cadastra um novo produto no sistema. Apenas o administrador e o gerente podem cadastrar produtos.

    Args:
        usuario_logado (str): O nome do usuário logado.
    """
    limpar_tela()
    exibir_mensagem("*** Cadastro de Produto ***", 'alerta')
    if usuario_logado not in ["admin", "gerente"]:
        exibir_mensagem("Acesso negado. Somente o administrador e o gerente podem cadastrar produtos.", 'erro')
        pausar()
        return

    codigo = input("Código do produto: ")
    if codigo in produtos:
        exibir_mensagem("Código de produto já existe.", 'erro')
        pausar()
        return

    nome = input("Nome do produto: ")
    preco_custo = input("Preço de custo: R$ ")
    preco_venda = input("Preço de venda: R$ ")
    estoque = input("Quantidade em estoque: ")
    unidade = input("Unidade de medida (ex: kg, ml, un): ")

    try:
        preco_custo = float(preco_custo)
        preco_venda = float(preco_venda)
        estoque = int(estoque)
        if preco_custo < 0 or preco_venda < 0 or estoque < 0:
            raise ValueError("Valores não podem ser negativos.")
    except ValueError:
        exibir_mensagem("Entrada inválida para preço ou estoque. Use apenas números positivos.", 'erro')
        pausar()
        return

    produtos[codigo] = {
        "nome": nome,
        "preco_custo": preco_custo,
        "preco_venda": preco_venda,
        "estoque": estoque,
        "unidade": unidade
    }
    exibir_mensagem(f"Produto '{nome}' cadastrado com sucesso!", 'sucesso')
    pausar()

def controle_estoque(usuario_logado):
    """
    Exibe o estoque atual de produtos. Apenas o administrador e o gerente podem ver o estoque.

    Args:
        usuario_logado (str): O nome do usuário logado.
    """
    limpar_tela()
    exibir_mensagem("*** Controle de Estoque ***", 'alerta')
    if usuario_logado not in ["admin", "gerente"]:
        exibir_mensagem("Acesso negado. Somente o administrador e o gerente podem ver o estoque.", 'erro')
        pausar()
        return

    if not produtos:
        exibir_mensagem("Não há produtos cadastrados.", 'erro')
        pausar()
        return

    print("Listagem de Produtos:")
    print("-" * 80)
    print(f"{'Código':<10} {'Nome':<30} {'Preço Custo':<15} {'Preço Venda':<15} {'Estoque':<10} {'Unidade'}")
    print("-" * 80)
    for codigo, produto in produtos.items():
        print(f"{codigo:<10} {produto['nome']:<30} R$ {produto['preco_custo']:<14.2f} R$ {produto['preco_venda']:<14.2f} {produto['estoque']:<10} {produto['unidade']}")
    print("-" * 80)
    pausar()

def adicionar_ao_carrinho(carrinho):
    """
    Adiciona um produto ao carrinho de compras.

    Args:
        carrinho (list): A lista que representa o carrinho de compras.
    """
    limpar_tela()
    exibir_mensagem("*** Adicionar ao Carrinho ***", 'alerta')
    codigo = input("Digite o código do produto: ")

    if not validar_codigo_produto(codigo):
        pausar()
        return

    quantidade = input("Digite a quantidade: ")
    quantidade_int = validar_quantidade(codigo, quantidade)
    if quantidade_int == 0:
        pausar()
        return

    # Verifica se o produto já está no carrinho
    for item in carrinho:
        if item['codigo'] == codigo:
            item['quantidade'] += quantidade_int
            produtos[codigo]['estoque'] -= quantidade_int
            exibir_mensagem(f"{quantidade_int} unidades de '{produtos[codigo]['nome']}' adicionadas ao carrinho.", 'sucesso')
            pausar()
            return

    # Se o produto não está no carrinho, adiciona um novo item
    carrinho.append({"codigo": codigo, "quantidade": quantidade_int})
    produtos[codigo]['estoque'] -= quantidade_int
    exibir_mensagem(f"{quantidade_int} unidades de '{produtos[codigo]['nome']}' adicionadas ao carrinho.", 'sucesso')
    pausar()

def exibir_carrinho(carrinho):
    """
    Exibe os itens no carrinho de compras.

    Args:
        carrinho (list): A lista que representa o carrinho de compras.

    Retorna:
        float: O valor total da compra, ou 0 se o carrinho estiver vazio.
    """
    limpar_tela()
    exibir_mensagem("*** Carrinho de Compras ***", 'alerta')
    if not carrinho:
        exibir_mensagem("O carrinho está vazio.", 'erro')
        pausar()
        return 0

    print("Itens no Carrinho:")
    print("-" * 80)
    print(f"{'Código':<10} {'Nome':<30} {'Quantidade':<10} {'Preço Unitário':<15} {'Preço Total':<15}")
    print("-" * 80)
    total = 0
    for item in carrinho:
        codigo = item['codigo']
        quantidade = item['quantidade']
        preco_unitario = produtos[codigo]['preco_venda']
        preco_total_item = preco_unitario * quantidade
        print(f"{codigo:<10} {produtos[codigo]['nome']:<30} {quantidade:<10} R$ {preco_unitario:<14.2f} R$ {preco_total_item:<14.2f}")
        total += preco_total_item
    print("-" * 80)
    print(f"Total do Carrinho: R$ {total:.2f}")
    pausar()
    return total

def remover_do_carrinho(carrinho):
    """
    Remove um produto do carrinho de compras.

    Args:
        carrinho (list): A lista que representa o carrinho de compras.
    """
    limpar_tela()
    exibir_mensagem("*** Remover do Carrinho ***", 'alerta')
    if not carrinho:
        exibir_mensagem("O carrinho está vazio.", 'erro')
        pausar()
        return

    codigo = input("Digite o código do produto para remover: ")
    if not any(item['codigo'] == codigo for item in carrinho):
        exibir_mensagem("Produto não encontrado no carrinho.", 'erro')
        pausar()
        return

    quantidade_remover = input(f"Digite a quantidade a remover (máximo {next(item['quantidade'] for item in carrinho if item['codigo'] == codigo)}): ")
    quantidade_remover_int = validar_quantidade(codigo, quantidade_remover)
    if quantidade_remover_int == 0:
        pausar()
        return

    for item in carrinho:
        if item['codigo'] == codigo:
            if quantidade_remover_int == item['quantidade']:
                carrinho.remove(item)
                produtos[codigo]['estoque'] += quantidade_remover_int
                exibir_mensagem(f"Produto '{produtos[codigo]['nome']}' removido do carrinho.", 'sucesso')
            elif quantidade_remover_int < item['quantidade']:
                item['quantidade'] -= quantidade_remover_int
                produtos[codigo]['estoque'] += quantidade_remover_int
                exibir_mensagem(f"{quantidade_remover_int} unidades de '{produtos[codigo]['nome']}' removidas do carrinho.", 'sucesso')
            else:
                exibir_mensagem("Quantidade inválida para remover.", 'erro')
            break
    pausar()

def finalizar_compra(carrinho, historico_vendas):
    """
    Finaliza a compra, processando o pagamento e gerando o comprovante.

    Args:
        carrinho (list): A lista que representa o carrinho de compras.
        historico_vendas (list): A lista que armazena o histórico de vendas.
    """
    limpar_tela()
    exibir_mensagem("*** Finalizar Compra ***", 'alerta')
    total = exibir_carrinho(carrinho)
    if total == 0:
        return

    print("Formas de pagamento: [1] À Vista, [2] Débito, [3] Crédito, [4] Pix")
    forma_pagamento = input("Escolha a forma de pagamento: ")

    if forma_pagamento not in ['1', '2', '3', '4']:
        exibir_mensagem("Forma de pagamento inválida.", 'erro')
        pausar()
        return

    if forma_pagamento == '1':  # À Vista
        valor_pago = input("Valor pago pelo cliente: R$ ")
        try:
            valor_pago = float(valor_pago)
        except ValueError:
            exibir_mensagem("Valor pago inválido. Digite um número.", 'erro')
            pausar()
            return
        if valor_pago < total:
            exibir_mensagem("Valor pago insuficiente.", 'erro')
            pausar()
            return
        troco = valor_pago - total
        exibir_mensagem(f"Troco: R$ {troco:.2f}", 'sucesso')
        gerar_comprovante(carrinho, total, "À Vista", valor_pago, troco)
        historico_vendas.append({
            "itens": [
                {"codigo": item['codigo'], "nome": produtos[item['codigo']]['nome'], "quantidade": item['quantidade'], "preco_unitario": produtos[item['codigo']]['preco_venda']}
                for item in carrinho
            ],
            "total": total,
            "forma_pagamento": "À Vista",
            "data": datetime.datetime.now(),
            "valor_pago": valor_pago,
            "troco": troco
        })
    else:  # Débito, Crédito, Pix
        exibir_mensagem(f"Pagamento via {['Débito', 'Crédito', 'Pix'][int(forma_pagamento) - 2]} realizado com sucesso!", 'sucesso')
        gerar_comprovante(carrinho, total, ['Débito', 'Crédito', 'Pix'][int(forma_pagamento) - 2])
        historico_vendas.append({
            "itens": [
                {"codigo": item['codigo'], "nome": produtos[item['codigo']]['nome'], "quantidade": item['quantidade'], "preco_unitario": produtos[item['codigo']]['preco_venda']}
                for item in carrinho
            ],
            "total": total,
            "forma_pagamento": ['Débito', 'Crédito', 'Pix'][int(forma_pagamento) - 2],
            "data": datetime.datetime.now()
        })

    carrinho.clear()
    pausar()

def gerar_comprovante(carrinho, total, forma_pagamento, valor_pago=None, troco=None):
    """
    Gera um comprovante de venda detalhado.

    Args:
        carrinho (list): A lista de itens vendidos.
        total (float): O total da venda.
        forma_pagamento (str): A forma de pagamento utilizada.
        valor_pago (float, opcional): O valor pago pelo cliente (para pagamento à vista).
        troco (float, opcional): O troco a ser devolvido (para pagamento à vista).
    """
    limpar_tela()
    exibir_mensagem("*** Comprovante de Venda ***", 'alerta')
    print("-" * 80)
    print(f"{'Data/Hora:':<20} {datetime.datetime.now():%d/%m/%Y %H:%M:%S}")
    print("-" * 80)
    print(f"{'Código':<10} {'Nome':<30} {'Quantidade':<10} {'Preço Unitário':<15} {'Preço Total':<15}")
    print("-" * 80)
    for item in carrinho:
        codigo = item['codigo']
        quantidade = item['quantidade']
        preco_unitario = produtos[codigo]['preco_venda']
        preco_total_item = preco_unitario * quantidade
        print(f"{codigo:<10} {produtos[codigo]['nome']:<30} {quantidade:<10} R$ {preco_unitario:<14.2f} R$ {preco_total_item:<14.2f}")
    print("-" * 80)
    print(f"{'Total:':<65} R$ {total:.2f}")
    print(f"{'Forma de Pagamento:':<65} {forma_pagamento}")
    if valor_pago is not None:
        print(f"{'Valor Pago:':<65} R$ {valor_pago:.2f}")
    if troco is not None:
        print(f"{'Troco:':<65} R$ {troco:.2f}")
    print("-" * 80)
    exibir_mensagem("Obrigado pela compra! Volte sempre!", 'normal')
    pausar()

def gerar_cupom_pagamento(carrinho, total, forma_pagamento):
    """
    Gera um cupom de pagamento simplificado.

    Args:
        carrinho (list): A lista de itens vendidos.
        total (float): O total da venda.
        forma_pagamento (str): A forma de pagamento utilizada.
    """
    limpar_tela()
    exibir_mensagem("*** Cupom de Pagamento ***", 'alerta')
    print("-" * 40)
    print(f"{'Data:':<10} {datetime.datetime.now():%d/%m/%Y}")
    print("-" * 40)
    print(f"{'Produto':<20} {'Qtd':<5} {'Preço':<10}")
    print("-" * 40)
    for item in carrinho:
        codigo = item['codigo']
        quantidade = item['quantidade']
        print(f"{produtos[codigo]['nome'][:20]:<20} {quantidade:<5} R$ {produtos[codigo]['preco_venda']:.2f}")
    print("-" * 40)
    print(f"{'Total:':<25} R$ {total:.2f}")
    print(f"{'Forma:':<25} {forma_pagamento}")
    print("-" * 40)
    exibir_mensagem("Volte Sempre!", 'normal')
    pausar()

def exibir_historico_vendas(historico_vendas, usuario_logado):
    """
    Exibe o histórico de vendas. Apenas o administrador e o gerente podem ver o histórico.

    Args:
        historico_vendas (list): A lista que armazena o histórico de vendas.
        usuario_logado (str): O nome do usuário logado.
    """
    limpar_tela()
    exibir_mensagem("*** Histórico de Vendas ***", 'alerta')
    if usuario_logado not in ["admin", "gerente"]:
        exibir_mensagem("Acesso negado. Somente o administrador e o gerente podem ver o histórico de vendas.", 'erro')
        pausar()
        return

    if not historico_vendas:
        exibir_mensagem("Não há vendas registradas.", 'erro')
        pausar()
        return

    print("Histórico de Vendas:")
    print("-" * 120)
    print(f"{'Data/Hora':<20} {'Itens':<50} {'Total':<10} {'Forma Pagamento':<15}")
    print("-" * 120)
    for venda in historico_vendas:
        itens_str = ", ".join(f"{item['nome']} ({item['quantidade']})" for item in venda['itens'])
        print(f"{venda['data']:<%d/%m/%Y %H:%M:%S} {itens_str:<50} R$ {venda['total']:<10.2f} {venda['forma_pagamento']:<15}")
    print("-" * 120)
    pausar()

def menu_principal(usuario_logado):
    """
    Exibe o menu principal do sistema.

    Args:
        usuario_logado (str): O nome do usuário logado.
    """
    carrinho = []
    historico_vendas = []
    while True:
        limpar_tela()
        exibir_mensagem("*** Menu Principal ***", 'alerta')
        print(f"Bem-vindo(a), {usuario_logado}!")
        print("[1] Ponto de Venda")
        print("[2] Cadastrar Produto")
        print("[3] Controle de Estoque")
        print("[4] Cadastrar Usuário")
        print("[5] Histórico de Vendas")
        print("[6] Sair")
        opcao = input("Escolha uma opção: ")

        if opcao == '1':
            while True:
                limpar_tela()
                exibir_mensagem("*** Ponto de Venda ***", 'alerta')
                print("[1] Adicionar ao Carrinho")
                print("[2] Exibir Carrinho")
                print("[3] Remover do Carrinho")
                print("[4] Finalizar Compra")
                print("[5] Gerar Cupom de Pagamento")
                print("[6] Voltar ao Menu Principal")
                opcao_pdv = input("Escolha uma opção: ")
                if opcao_pdv == '1':
                    adicionar_ao_carrinho(carrinho)
                elif opcao_pdv == '2':
                    exibir_carrinho(carrinho)
                elif opcao_pdv == '3':
                    remover_do_carrinho(carrinho)
                elif opcao_pdv == '4':
                    finalizar_compra(carrinho, historico_vendas)
                elif opcao_pdv == '5':
                    total_venda = exibir_carrinho(carrinho)
                    if total_venda > 0:
                        forma_pagamento_cupom = input("Informe a forma de pagamento para o cupom: ")
                        gerar_cupom_pagamento(carrinho, total_venda, forma_pagamento_cupom)
                    else:
                        exibir_mensagem("Não há itens no carrinho para gerar o cupom.",'erro')
                        pausar()
                elif opcao_pdv == '6':
                    break
                else:
                    exibir_mensagem("Opção inválida.", 'erro')
                    pausar()
        elif opcao == '2':
            cadastrar_produto(usuario_logado)
        elif opcao == '3':
            controle_estoque(usuario_logado)
        elif opcao == '4':
            cadastrar_usuario(usuario_logado)
        elif opcao == '5':
            exibir_historico_vendas(historico_vendas, usuario_logado)
        elif opcao == '6':
            exibir_mensagem("Saindo do sistema.", 'normal')
            break
        else:
            exibir_mensagem("Opção inválida.", 'erro')
            pausar()

# Iniciar o sistema
if __name__ == "__main__":
    usuario_logado = tela_login()
    if usuario_logado:
        menu_principal(usuario_logado)